ðŸ¤– CONSTRAINTS ðŸ¤–

ðŸ‘¾ SQL constraints are used to specify rules for data in a table.

ðŸ‘¾ Constraints can be specified when the table is created with the CREATE TABLE statement.

ðŸ‘¾ or after the table is created with the ALTER TABLE statement.

ðŸ‘¾ Constraints are used to limit the type of data that can go into a table.
 
ðŸ‘¾ This ensures the accuracy and reliability of the data in the table. 

ðŸ‘¾ If there is any violation between the constraint and the data action, the action is aborted.

ðŸ‘» UNIQUE

ðŸ‘¾ The UNIQUE constraint ensures that all values in a column are different.

ðŸ‘¾ Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.

ðŸ‘¾ A PRIMARY KEY constraint automatically has a UNIQUE constraint.

ðŸ‘¾ However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

ðŸ‘¾ creates a UNIQUE constraint on the "ID" column when the "Persons" table is created

CREATE TABLE Persons (
    ID int UNIQUE,
    LastName varchar(255),
    FirstName varchar(255),
    Age int,
);

CREATE TABLE Persons (
    ID int,
    LastName varchar(255,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);

ðŸ‘¾ To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

ðŸ‘¾ To create a UNIQUE constraint on the "ID" column when the table is already created

ðŸ‘€ ALTER TABLE Persons ADD CONSTRAINT UNIQUE (ID);

ðŸ‘¾ To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns

ðŸ‘€ ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);

ðŸ‘¾ To drop a UNIQUE constraint

ðŸ‘€ ALTER TABLE Persons DROP INDEX UC_Person;

ðŸ‘» NOT NULL

ðŸ‘¾ By default, a column can hold NULL values.

ðŸ‘¾ The NOT NULL constraint enforces a column to NOT accept NULL values.

ðŸ‘¾ This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

ðŸ‘¾ To create a NOT NULL constraint on the column when the table is already created

ðŸ‘€ ALTER TABLE Persons MODIFY Age int NOT NULL;

ðŸ‘» CHECK

ðŸ‘¾ The CHECK constraint is used to limit the value range that can be placed in a column.

ðŸ‘¾ If you define a CHECK constraint on a column it will allow only certain values for this column.

ðŸ‘¾ If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

ðŸ‘¾ To create a CHECK constraint on the column when the table is already created

ðŸ‘€ ALTER TABLE Persons ADD CHECK (Age>=18);

ðŸ‘€ ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');

ðŸ‘¾ To drop a CHECK constraint

ðŸ‘€ ALTER TABLE Persons DROP CHECK CHK_PersonAge;

ðŸ‘» DEFAULT

ðŸ‘¾ The DEFAULT constraint is used to set a default value for a column.

ðŸ‘¾ The default value will be added to all new records, if no other value is specified.

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

ðŸ‘¾ The DEFAULT constraint can also be used to insert system values, by using functions like CURRENT_DATE()

CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT CURRENT_DATE()
);

ðŸ‘¾ To create a DEFAULT constraint on the column when the table is already created

ðŸ‘€ ALTER TABLE Persons ALTER City SET DEFAULT 'Sandnes';

ðŸ‘¾ To drop a DEFAULT constraint

ðŸ‘€ ALTER TABLE Persons ALTER City DROP DEFAULT;

ðŸ‘» AUTO INCREMENT

ðŸ‘¾ Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

ðŸ‘¾ Often this is the primary key field that we would like to be created automatically every time a new record is inserted.

ðŸ‘¾ MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.

ðŸ‘¾ By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

ðŸ‘¾ To let the AUTO_INCREMENT sequence start with another value,

ðŸ‘€ ALTER TABLE Persons AUTO_INCREMENT=100;